/**
 * @file lecture5.cpp
 * @author Zeid Kootbally (zeidk@umd.edu)
 * @brief Code snippets for lecture 5 on functions
 * @version 1.0
 * @date 2025-07-03
 *
 * @copyright Copyright (c) 2025
 *
 */

#include <iomanip>
#include <iostream>
#include <vector>

// function declaration/prototype
int add_numbers(int a, int b);

// function definition/implementation
int add_numbers(int a, int b)
{
    return a + b;
}

std::vector<int> create_vector()
{
    return std::vector<int>{1, 2, 3};
    //     ^^^^^^^^^^^^^^^^^^^^^^^^^
    //     Prvalue - guaranteed RVO
}
//======== 3
// void print_hello()
// {
//     std::cout << "hello, ";
//     print_world();
// }

// void print_world()
// {
//     std::cout << "world\n";
// }

//======== 4
// void prompt_user() {
//     std::cout << "Enter a number: ";
//     int num{};
//     std::cin >> num;
//     print_number(num);
// }

// void print_number(int number) {
//     if (number == -1)
//         return;

//     if (number > 0)
//         std::cout << "The number is: " << number << "\n";
//     else
//         prompt_user();
// }

//======== 5
// void add_ten(int x)
// {
//     // Implicit int x{a};
//     x += 10; // 15
// }

//======== 6
// void add_ten(int &x) {
//     // Implicit: int &x{a};
//     x = x + 10;  // 15
// }

//======== 7
// Exercise 4

int main()
{
    //==============
    //======== 1
    //==============

    //==============
    //======== 2
    //==============

    // std::cout << add_numbers(3, 5) << '\n';

    //==============
    //======== 3
    //==============
    // print_hello();
    // std::cout << "exit main\n";

    //==============
    //======== 4
    //==============
    // prompt_user();

    //==============
    //======== 5
    //==============
    // int a{5};
    // add_ten(a);
    // std::cout << a << '\n'; // 5

    //==============
    //======== 6
    //==============
    // int a{5};
    // add_ten(a);
    // std::cout << a << '\n'; // 15

    //==============
    //======== 7
    //==============
    // int x{5};
    // int y{10};

    // std::cout << x << ", " << y << '\n'; // 5, 10
    // swap_values(x, y);
    // std::cout << x << ", " << y << '\n'; // 10, 5

    //==============
    //======== 8
    //==============

    //==============
    //======== 9
    //==============

    //==============
    //======== 10
    //==============

    //==============
    //======== 11
    //==============

    // std::vector<int> vect{create_vector()};
    // // Construction directly in vect's location
    // for (const auto &item: vect){
    //     std::cout << item << '\n';
    // }

    //==============
    //======== 12
    //==============

    //==============
    //======== 13
    //==============

    //==============
    //======== 14
    //==============

    //==============
    //======== 15
    //==============

    //==============
    //======== 16
    //==============

    //==============
    //======== 17
    //==============

    //==============
    //======== 18
    //==============

    //==============
    //======== 19
    //==============

    //==============
    //======== 20
    //==============

    //==============
    //======== 21
    //==============

    //==============
    //======== 22
    //==============

    //==============
    //======== 23
    //==============

    //==============
    //======== 24
    //==============

    //==============
    //======== 25
    //==============

    //==============
    //======== 26
    //==============

    //==============
    //======== 27
    //==============

    //==============
    //======== 28
    //==============

    //==============
    //======== 29
    //==============

    //==============
    //======== 30
    //==============

    //==============
    //======== 31
    //==============

    //==============
    //======== 32
    //==============
}
